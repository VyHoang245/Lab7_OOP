/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cdstore;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.Serializable;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.plaf.FileChooserUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vygir
 */
public class CD_Store extends javax.swing.JFrame implements Serializable {

    ArrayList<CD> list;

    /**
     * Creates new form CD_Store
     */
    public CD_Store() {
        initComponents();
        list = new ArrayList<>();
        
        fillListCDs();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        NewCD = new javax.swing.JButton();
        backup = new javax.swing.JButton();
        restore = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        search = new javax.swing.JPanel();
        choise = new javax.swing.JComboBox<>();
        text = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listCD = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(582, 60));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        NewCD.setText("New CD");
        NewCD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewCDActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(NewCD, gridBagConstraints);

        backup.setText("Backup");
        backup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(backup, gridBagConstraints);

        restore.setText("Restore");
        restore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(restore, gridBagConstraints);

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 6);
        jPanel1.add(refresh, gridBagConstraints);

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        jPanel1.add(delete, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        search.setPreferredSize(new java.awt.Dimension(582, 60));
        search.setLayout(new java.awt.GridBagLayout());

        choise.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Collection", "Type", "Price","Year of Release" }));
        choise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 24, 0, 24);
        search.add(choise, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 78;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 15);
        search.add(text, gridBagConstraints);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 24, 0, 24);
        search.add(searchButton, gridBagConstraints);

        jPanel2.add(search, java.awt.BorderLayout.PAGE_END);

        listCD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Collection", "Type", "Price"
            }
        ));
        jScrollPane1.setViewportView(listCD);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupActionPerformed
        JFileChooser ch = new JFileChooser();
        int userSelection = ch.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = ch.getSelectedFile();
            System.out.print("Save as file: " + fileToSave.getAbsolutePath());
        }

    }//GEN-LAST:event_backupActionPerformed

    private void restoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreActionPerformed
        JFileChooser ch = new JFileChooser();
        ch.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = ch.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = ch.getSelectedFile();
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
}
    }//GEN-LAST:event_restoreActionPerformed

    private void NewCDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewCDActionPerformed
       newCD newcd = new newCD(this, true);
       newcd.setVisible(true);
       if(newcd.getCd()!=null)
       {
            list.add(newcd.getCd());
             saveCDs();
             fillListCDs();
       }
    }//GEN-LAST:event_NewCDActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        fillListCDs();
    }//GEN-LAST:event_refreshActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int index = listCD.getSelectedRow();
        list.remove(index);
        saveCDs();
    }//GEN-LAST:event_deleteActionPerformed

    private void choiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiseActionPerformed
        
    }//GEN-LAST:event_choiseActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String choise = (String) this.choise.getItemAt(this.choise.getSelectedIndex());
        String Text = text.getText();
        ArrayList<CD> sort = new ArrayList<>();
        switch(choise){
            case "Title":
              sort=  searchByTitle(Text);
                break;
            case "Collection":
                sort = searchByCollection(Text);
                break;
            case "Type":
                sort = searchByType(Text);
                break;
            case "Price":
                sort = searchByPrice(Text);
                break;
        }
        fillListCDs(sort);
    }//GEN-LAST:event_searchButtonActionPerformed
    public ArrayList<CD> searchByTitle(String text){
        ArrayList<CD> sort = new ArrayList<>();
        for(CD c:list){
            if(c.getTitle().compareToIgnoreCase(text)==0){
                sort.add(c);
            }
        }
        return sort;
    }
     public  ArrayList<CD> searchByCollection(String text){
       ArrayList<CD> sort = new ArrayList<>();
         for(CD c:list){
            if(c.getCollection().compareToIgnoreCase(text)==0){
                sort.add(c);
            }
        }
         return sort;
    }
     public  ArrayList<CD> searchByType(String text){
         ArrayList<CD> sort = new ArrayList<>();
        for(CD c:list){
            if(c.getType().compareToIgnoreCase(text)==0){
                sort.add(c);
            }
        }
        return sort;
    }
     public  ArrayList<CD> searchByPrice(String text){
         ArrayList<CD> sort = new ArrayList<>();
        for(CD c:list){
            if(c.getPrice().compareToIgnoreCase(text)==0){
                sort.add(c);
            }
        }
        return sort;
    }
     
    
        public void fillListCDs() {
        readCDs();
        DefaultTableModel model = (DefaultTableModel) listCD.getModel();
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (CD c : list) {
            Object[] rows = new Object[]{c.getTitle(), c.getCollection(), c.getType(), c.getPrice()};
            model.addRow(rows);
        }
        saveCDs();
        pack();

    }
        public void fillListCDs(ArrayList<CD> sort) {
        DefaultTableModel model = (DefaultTableModel) listCD.getModel();
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (CD c : sort) {
            Object[] rows = new Object[]{c.getTitle(), c.getCollection(), c.getType(), c.getPrice()};
            model.addRow(rows);
        }
        pack();

    }

    public void saveCDs() {
        try (PrintWriter pw = new PrintWriter(new File("CDs.DAT"))) {
            for (CD u : list) {
                pw.println(u.getId());
                pw.println(u.getTitle());
                pw.println(u.getCollection());
                pw.println(u.getType());
                pw.println(u.getPrice());
                pw.println(u.getYear());
            }
        } catch (Exception e) {
            System.out.println("Got an exception: " + e.getMessage());
        }
    }

    public void readCDs() {
       list.clear();
        try (Scanner reader = new Scanner(new File("CDs.DAT"))) {
            while (reader.hasNext()) {
                CD u = new CD();
                u.setId((String) (reader.nextLine()));
                u.setTitle((String) (reader.nextLine()));
                u.setCollection((String) (reader.nextLine()));
                u.setType((String) (reader.nextLine()));
                u.setPrice((String) (reader.nextLine()));
                u.setYear((String) (reader.nextLine()));

                list.add(u);
            }
        } catch (Exception e) {
            System.out.println("Got an exception");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CD_Store.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CD_Store.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CD_Store.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CD_Store.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CD_Store().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton NewCD;
    private javax.swing.JButton backup;
    private javax.swing.JComboBox<String> choise;
    private javax.swing.JButton delete;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable listCD;
    private javax.swing.JButton refresh;
    private javax.swing.JButton restore;
    private javax.swing.JPanel search;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField text;
    // End of variables declaration//GEN-END:variables
}
